// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using diga.dal;

namespace diga.dal.Migrations
{
    [DbContext(typeof(DigaContext))]
    [Migration("20210218101511_AddChatFields")]
    partial class AddChatFields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("diga.bl.Models.Advantages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("LongTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TitleTextId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LongTextId");

                    b.HasIndex("ShortTextId");

                    b.HasIndex("TitleTextId");

                    b.ToTable("Advantages");
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NationalityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationUserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("diga.bl.Models.Articles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("TextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TitleTextId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TextId");

                    b.HasIndex("TitleTextId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("diga.bl.Models.Carts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("FromBalance")
                        .HasColumnType("float");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Modules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double?>("TotalPriceWithDiscount")
                        .HasColumnType("float");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TariffId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("diga.bl.Models.Cases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReviewFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewVideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TitleTextId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LongTextId");

                    b.HasIndex("ShortTextId");

                    b.HasIndex("TitleTextId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("diga.bl.Models.Functions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BigTitleTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FullDescriptionTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LongTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallTitleTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BigTitleTextId");

                    b.HasIndex("FullDescriptionTextId");

                    b.HasIndex("LongTextId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SmallTitleTextId");

                    b.ToTable("Functions");
                });

            modelBuilder.Entity("diga.bl.Models.ModuleSections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ButtonTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("TextId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ButtonTextId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("TextId");

                    b.ToTable("ModuleSections");
                });

            modelBuilder.Entity("diga.bl.Models.Modules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BigTitleTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CartOrder")
                        .HasColumnType("int");

                    b.Property<string>("CommentTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("SmallTitleTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BigTitleTextId");

                    b.HasIndex("CommentTextId");

                    b.HasIndex("LongTextId");

                    b.HasIndex("SmallTitleTextId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("diga.bl.Models.PacketModules", b =>
                {
                    b.Property<int>("PacketId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("PacketId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("PacketModules");
                });

            modelBuilder.Entity("diga.bl.Models.Packets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Days")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<double?>("PriceForNextUser")
                        .HasColumnType("float");

                    b.Property<string>("Tariff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TariffPrice")
                        .HasColumnType("float");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrialDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Packets");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Chats.PlatformChatRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlatformChatRooms");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Chats.PlatformChatRoomMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("SenderPlatformChatRoomId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SenderApplicationUserId", "SenderPlatformChatRoomId");

                    b.ToTable("PlatformChatRoomMessages");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Chats.PlatformChatRoomMessageFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAudio")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PlatformChatRoomMessageFile");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Chats.PlatformChatRoomMessageReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("PlatformChatRoomMessageId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformChatRoomMessageId");

                    b.HasIndex("UserId");

                    b.ToTable("PlatformChatRoomMessageReactions");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Chats.PlatformChatRoomUser", b =>
                {
                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformChatRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastStatusChanged")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicationUserId", "PlatformChatRoomId");

                    b.HasIndex("PlatformChatRoomId");

                    b.ToTable("PlatformChatRoomUsers");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AddressHidden")
                        .HasColumnType("bit");

                    b.Property<int?>("BalanceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BuildStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ClosingCase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContractPriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrepayment")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OriginalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedBuildEnd")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefusalCase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TenderEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.Property<string>("VersionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.HasIndex("CityId");

                    b.HasIndex("ContractPriorityId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("Name");

                    b.HasIndex("OriginalId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("PlatformContracts");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractApproval", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("ContractCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("ContractExecutor")
                        .HasColumnType("bit");

                    b.Property<string>("CustomContractText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EstimateCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("EstimateExecutor")
                        .HasColumnType("bit");

                    b.Property<bool>("FinishCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("FinishExecutor")
                        .HasColumnType("bit");

                    b.Property<bool>("SigningCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("SigningExecutor")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PlatformContractApprovals");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractBid", b =>
                {
                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DaysNumber")
                        .HasColumnType("int");

                    b.Property<bool>("Favorite")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicationUserId", "PlatformContractId");

                    b.HasIndex("PlatformContractId");

                    b.HasIndex("Status");

                    b.ToTable("PlatformContractBids");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractCategory", b =>
                {
                    b.Property<int>("PlatformCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformContractId")
                        .HasColumnType("int");

                    b.HasKey("PlatformCategoryId", "PlatformContractId");

                    b.HasIndex("PlatformContractId");

                    b.ToTable("PlatformContractCategories");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Case")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlatformContractId")
                        .HasColumnType("int");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PlatformContractId");

                    b.ToTable("PlatformContractChanges");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractDiscussion", b =>
                {
                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformContractId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationUserId", "PlatformContractId");

                    b.HasIndex("PlatformContractId");

                    b.ToTable("PlatformContractDiscussions");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractFavorite", b =>
                {
                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformContractId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "PlatformContractId");

                    b.HasIndex("PlatformContractId");

                    b.ToTable("PlatformContractFavorites");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlatformContractId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformContractId");

                    b.ToTable("PlatformContractFiles");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractPaymentPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PlatformContractId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PlatformContractId");

                    b.ToTable("PlatformContractPaymentParts");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("LikeText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlatformContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SuggestionText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PlatformContractId");

                    b.ToTable("PlatformContractReviews");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractReviewDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlatformContractReviewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformContractReviewId");

                    b.ToTable("PlatformContractReviewDocuments");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractReviewMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DescriptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PlatformContractReviewId")
                        .HasColumnType("int");

                    b.Property<string>("TextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("PlatformContractReviewId");

                    b.HasIndex("TextId");

                    b.ToTable("PlatformContractReviewMarks");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractTag", b =>
                {
                    b.Property<int>("PlatformContractId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformTagId")
                        .HasColumnType("int");

                    b.HasKey("PlatformContractId", "PlatformTagId");

                    b.HasIndex("PlatformTagId");

                    b.ToTable("PlatformContractTags");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractView", b =>
                {
                    b.Property<int>("PlatformContractId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.HasKey("PlatformContractId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PlatformContractViews");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Estimates.PlatformEstimate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("AnotherPercent")
                        .HasColumnType("float");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOrdered")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OriginalId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformContractId")
                        .HasColumnType("int");

                    b.Property<int?>("PlatformVATId")
                        .HasColumnType("int");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OriginalId");

                    b.HasIndex("PlatformContractId");

                    b.HasIndex("PlatformVATId");

                    b.ToTable("PlatformEstimates");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Estimates.PlatformEstimatePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimateSectionId")
                        .HasColumnType("int");

                    b.Property<string>("Measurement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EstimateSectionId");

                    b.ToTable("PlatformEstimatePositions");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Estimates.PlatformEstimateSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EstimateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("ParentSectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstimateId");

                    b.HasIndex("ParentSectionId");

                    b.ToTable("PlatformEstimateSections");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Information.PlatformBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("PlatformBalances");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Information.PlatformCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NameId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("PlatformCategories");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Information.PlatformCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("PlatformCities");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Information.PlatformContractPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlatformContractPriorities");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Information.PlatformContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlatformContractTypes");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Information.PlatformCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlatformCountries");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Information.PlatformLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlatformLanguages");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Information.PlatformTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlatformTags");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Information.PlatformVAT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Percent")
                        .HasColumnType("float");

                    b.Property<string>("RegionCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlatformVATs");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Notifications.PlatformNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PlatformNotifications");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Notifications.PlatformNotificationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlatformNotificationId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformNotificationId");

                    b.ToTable("PlatformNotificationDatas");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Portfolio.PlatformAlbumCategory", b =>
                {
                    b.Property<int>("PortfolioAlbumId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformCategoryId")
                        .HasColumnType("int");

                    b.HasKey("PortfolioAlbumId", "PlatformCategoryId");

                    b.HasIndex("PlatformCategoryId");

                    b.ToTable("PlatformAlbumCategories");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Portfolio.PlatformPortfolioAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PlatformPortfolioAlbums");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Portfolio.PlatformPortfolioPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("PortfolioAlbumId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioAlbumId");

                    b.ToTable("PlatformPortfolioPhotos");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Portfolio.PlatformPortfolioVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PlatformPortfolioVideos");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformCompany", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankIdentificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckingAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrespondentAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Site")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxpayerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlatformCompany");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserCategory", b =>
                {
                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformCategoryId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "PlatformCategoryId");

                    b.HasIndex("PlatformCategoryId");

                    b.ToTable("PlatformUserCategories");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserFilterCategory", b =>
                {
                    b.Property<int>("PlatformUserSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformCategoryId")
                        .HasColumnType("int");

                    b.HasKey("PlatformUserSettingsId", "PlatformCategoryId");

                    b.HasIndex("PlatformCategoryId");

                    b.ToTable("PlatformUserFilterCategories");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserLanguage", b =>
                {
                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformLanguageId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "PlatformLanguageId");

                    b.HasIndex("PlatformLanguageId");

                    b.ToTable("PlatformUserLanguages");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserPhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PlatformUserPhoneNumbers");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PlatformUserRatings");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserSettings", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("FilterHideMyBids")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PlatformUserSettings");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserTag", b =>
                {
                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformTagId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "PlatformTagId");

                    b.HasIndex("PlatformTagId");

                    b.ToTable("PlatformUserTags");
                });

            modelBuilder.Entity("diga.bl.Models.Promocodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<double?>("ToBalance")
                        .HasColumnType("float");

                    b.Property<int?>("ToPeople")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Promocodes");
                });

            modelBuilder.Entity("diga.bl.Models.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AnswerTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullAnswerTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerTextId");

                    b.HasIndex("FullAnswerTextId");

                    b.HasIndex("QuestionTextId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("diga.bl.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("diga.bl.Models.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReviewTextId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NameTextId");

                    b.HasIndex("PositionTextId");

                    b.HasIndex("ReviewTextId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("diga.bl.Models.Sectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BigTitleTextId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FullDescriptionTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LongTextId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallTitleTextId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FullDescriptionTextId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("diga.bl.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("diga.bl.Models.TariffModules", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.HasKey("ModuleId", "TariffId");

                    b.HasIndex("TariffId");

                    b.ToTable("TariffModules");
                });

            modelBuilder.Entity("diga.bl.Models.Tariffs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double?>("PriceForNextUser")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("diga.bl.Models.TeamMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CountryTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryTextId");

                    b.HasIndex("DepartmentTextId");

                    b.HasIndex("NameTextId");

                    b.HasIndex("PositionTextId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("diga.bl.Models.Texts", b =>
                {
                    b.Property<string>("TextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("En")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Es")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsHtml")
                        .HasColumnType("bit");

                    b.Property<string>("Pt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ru")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TextId");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("diga.bl.Models.UserModules", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<double?>("CurrentPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsTrial")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("UserModules");
                });

            modelBuilder.Entity("diga.bl.Models.UserTariffs", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<double?>("CurrentPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsTrial")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<double?>("PriceForNextUser")
                        .HasColumnType("float");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "TariffId");

                    b.HasIndex("TariffId");

                    b.ToTable("UserTariffs");
                });

            modelBuilder.Entity("diga.bl.Models.Advantages", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "LongText")
                        .WithMany()
                        .HasForeignKey("LongTextId");

                    b.HasOne("diga.bl.Models.Texts", "ShortText")
                        .WithMany()
                        .HasForeignKey("ShortTextId");

                    b.HasOne("diga.bl.Models.Texts", "TitleText")
                        .WithMany()
                        .HasForeignKey("TitleTextId");

                    b.Navigation("LongText");

                    b.Navigation("ShortText");

                    b.Navigation("TitleText");
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationRoleClaim", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationUser", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Information.PlatformCountry", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationUserLogin", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationUserToken", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("diga.bl.Models.Articles", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "Text")
                        .WithMany()
                        .HasForeignKey("TextId");

                    b.HasOne("diga.bl.Models.Texts", "TitleText")
                        .WithMany()
                        .HasForeignKey("TitleTextId");

                    b.Navigation("Text");

                    b.Navigation("TitleText");
                });

            modelBuilder.Entity("diga.bl.Models.Carts", b =>
                {
                    b.HasOne("diga.bl.Models.Tariffs", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Tariff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diga.bl.Models.Cases", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "LongText")
                        .WithMany()
                        .HasForeignKey("LongTextId");

                    b.HasOne("diga.bl.Models.Texts", "ShortText")
                        .WithMany()
                        .HasForeignKey("ShortTextId");

                    b.HasOne("diga.bl.Models.Texts", "TitleText")
                        .WithMany()
                        .HasForeignKey("TitleTextId");

                    b.Navigation("LongText");

                    b.Navigation("ShortText");

                    b.Navigation("TitleText");
                });

            modelBuilder.Entity("diga.bl.Models.Functions", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "BigTitleText")
                        .WithMany()
                        .HasForeignKey("BigTitleTextId");

                    b.HasOne("diga.bl.Models.Texts", "FullDescription")
                        .WithMany()
                        .HasForeignKey("FullDescriptionTextId");

                    b.HasOne("diga.bl.Models.Texts", "LongText")
                        .WithMany()
                        .HasForeignKey("LongTextId");

                    b.HasOne("diga.bl.Models.Modules", "Module")
                        .WithMany("Functions")
                        .HasForeignKey("ModuleId");

                    b.HasOne("diga.bl.Models.Texts", "SmallTitleText")
                        .WithMany()
                        .HasForeignKey("SmallTitleTextId");

                    b.Navigation("BigTitleText");

                    b.Navigation("FullDescription");

                    b.Navigation("LongText");

                    b.Navigation("Module");

                    b.Navigation("SmallTitleText");
                });

            modelBuilder.Entity("diga.bl.Models.ModuleSections", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "ButtonText")
                        .WithMany()
                        .HasForeignKey("ButtonTextId");

                    b.HasOne("diga.bl.Models.Modules", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Texts", "Text")
                        .WithMany()
                        .HasForeignKey("TextId");

                    b.Navigation("ButtonText");

                    b.Navigation("Module");

                    b.Navigation("Text");
                });

            modelBuilder.Entity("diga.bl.Models.Modules", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "BigTitleText")
                        .WithMany()
                        .HasForeignKey("BigTitleTextId");

                    b.HasOne("diga.bl.Models.Texts", "CommentText")
                        .WithMany()
                        .HasForeignKey("CommentTextId");

                    b.HasOne("diga.bl.Models.Texts", "LongText")
                        .WithMany()
                        .HasForeignKey("LongTextId");

                    b.HasOne("diga.bl.Models.Texts", "SmallTitleText")
                        .WithMany()
                        .HasForeignKey("SmallTitleTextId");

                    b.Navigation("BigTitleText");

                    b.Navigation("CommentText");

                    b.Navigation("LongText");

                    b.Navigation("SmallTitleText");
                });

            modelBuilder.Entity("diga.bl.Models.PacketModules", b =>
                {
                    b.HasOne("diga.bl.Models.Modules", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Packets", "Packet")
                        .WithMany("PacketModules")
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Chats.PlatformChatRoomMessage", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Chats.PlatformChatRoomUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderApplicationUserId", "SenderPlatformChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Chats.PlatformChatRoomMessageFile", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Chats.PlatformChatRoomMessage", "PlatformChatRoomMessage")
                        .WithOne("File")
                        .HasForeignKey("diga.bl.Models.Platform.Chats.PlatformChatRoomMessageFile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformChatRoomMessage");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Chats.PlatformChatRoomMessageReaction", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Chats.PlatformChatRoomMessage", "PlatformChatRoomMessage")
                        .WithMany("Reactions")
                        .HasForeignKey("PlatformChatRoomMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformChatRoomMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Chats.PlatformChatRoomUser", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Chats.PlatformChatRoom", "PlatformChatRoom")
                        .WithMany("Users")
                        .HasForeignKey("PlatformChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PlatformChatRoom");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContract", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Information.PlatformBalance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId");

                    b.HasOne("diga.bl.Models.Platform.Information.PlatformCity", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("diga.bl.Models.Platform.Information.PlatformContractPriority", "ContractPriority")
                        .WithMany()
                        .HasForeignKey("ContractPriorityId");

                    b.HasOne("diga.bl.Models.Platform.Information.PlatformContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId");

                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContract", "Original")
                        .WithMany()
                        .HasForeignKey("OriginalId");

                    b.HasOne("diga.bl.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Balance");

                    b.Navigation("City");

                    b.Navigation("ContractPriority");

                    b.Navigation("ContractType");

                    b.Navigation("Original");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractApproval", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContract", "PlatformContract")
                        .WithOne("Approval")
                        .HasForeignKey("diga.bl.Models.Platform.Contracts.PlatformContractApproval", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformContract");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractBid", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContract", "PlatformContract")
                        .WithMany("Bids")
                        .HasForeignKey("PlatformContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PlatformContract");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractCategory", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Information.PlatformCategory", "PlatformCategory")
                        .WithMany()
                        .HasForeignKey("PlatformCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContract", "PlatformContract")
                        .WithMany("Categories")
                        .HasForeignKey("PlatformContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformCategory");

                    b.Navigation("PlatformContract");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractChange", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContract", "PlatformContract")
                        .WithMany()
                        .HasForeignKey("PlatformContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PlatformContract");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractDiscussion", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContract", "PlatformContract")
                        .WithMany("Discussions")
                        .HasForeignKey("PlatformContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PlatformContract");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractFavorite", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContract", "PlatformContract")
                        .WithMany()
                        .HasForeignKey("PlatformContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PlatformContract");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractFile", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContract", "PlatformContract")
                        .WithMany("Files")
                        .HasForeignKey("PlatformContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformContract");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractPaymentPart", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContract", "PlatformContract")
                        .WithMany("Parts")
                        .HasForeignKey("PlatformContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformContract");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractReview", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Reviews")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContract", "PlatformContract")
                        .WithMany("Reviews")
                        .HasForeignKey("PlatformContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PlatformContract");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractReviewDocument", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContractReview", "PlatformContractReview")
                        .WithMany("Documents")
                        .HasForeignKey("PlatformContractReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformContractReview");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractReviewMark", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContractReview", "PlatformContractReview")
                        .WithMany("Marks")
                        .HasForeignKey("PlatformContractReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Texts", "Text")
                        .WithMany()
                        .HasForeignKey("TextId");

                    b.Navigation("Description");

                    b.Navigation("PlatformContractReview");

                    b.Navigation("Text");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractTag", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContract", "PlatformContract")
                        .WithMany("Tags")
                        .HasForeignKey("PlatformContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Information.PlatformTag", "PlatformTag")
                        .WithMany()
                        .HasForeignKey("PlatformTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformContract");

                    b.Navigation("PlatformTag");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractView", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContract", "PlatformContract")
                        .WithMany()
                        .HasForeignKey("PlatformContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PlatformContract");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Estimates.PlatformEstimate", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Estimates.PlatformEstimate", "Original")
                        .WithMany()
                        .HasForeignKey("OriginalId");

                    b.HasOne("diga.bl.Models.Platform.Contracts.PlatformContract", "PlatformContract")
                        .WithMany("PlatformEstimates")
                        .HasForeignKey("PlatformContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Information.PlatformVAT", "PlatformVAT")
                        .WithMany()
                        .HasForeignKey("PlatformVATId");

                    b.Navigation("Creator");

                    b.Navigation("Original");

                    b.Navigation("PlatformContract");

                    b.Navigation("PlatformVAT");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Estimates.PlatformEstimatePosition", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Estimates.PlatformEstimateSection", "EstimateSection")
                        .WithMany("Positions")
                        .HasForeignKey("EstimateSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstimateSection");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Estimates.PlatformEstimateSection", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Estimates.PlatformEstimate", "Estimate")
                        .WithMany("Sections")
                        .HasForeignKey("EstimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Estimates.PlatformEstimateSection", "ParentSection")
                        .WithMany()
                        .HasForeignKey("ParentSectionId");

                    b.Navigation("Estimate");

                    b.Navigation("ParentSection");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Information.PlatformCategory", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.HasOne("diga.bl.Models.Platform.Information.PlatformCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("Name");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Information.PlatformCity", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Information.PlatformCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Notifications.PlatformNotification", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Notifications.PlatformNotificationData", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Notifications.PlatformNotification", "PlatformNotification")
                        .WithMany("Datas")
                        .HasForeignKey("PlatformNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformNotification");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Portfolio.PlatformAlbumCategory", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Information.PlatformCategory", "PlatformCategory")
                        .WithMany()
                        .HasForeignKey("PlatformCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Portfolio.PlatformPortfolioAlbum", "PortfolioAlbum")
                        .WithMany("AlbumCategories")
                        .HasForeignKey("PortfolioAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformCategory");

                    b.Navigation("PortfolioAlbum");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Portfolio.PlatformPortfolioAlbum", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Portfolio.PlatformPortfolioPhoto", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Portfolio.PlatformPortfolioAlbum", "PortfolioAlbum")
                        .WithMany("PortfolioPhotos")
                        .HasForeignKey("PortfolioAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PortfolioAlbum");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Portfolio.PlatformPortfolioVideo", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformCompany", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("PlatformCompany")
                        .HasForeignKey("diga.bl.Models.Platform.Users.PlatformCompany", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserCategory", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Information.PlatformCategory", "PlatformCategory")
                        .WithMany()
                        .HasForeignKey("PlatformCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PlatformCategory");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserFilterCategory", b =>
                {
                    b.HasOne("diga.bl.Models.Platform.Information.PlatformCategory", "PlatformCategory")
                        .WithMany()
                        .HasForeignKey("PlatformCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Users.PlatformUserSettings", "PlatformUserSettings")
                        .WithMany("FilterCategories")
                        .HasForeignKey("PlatformUserSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformCategory");

                    b.Navigation("PlatformUserSettings");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserLanguage", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Languages")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Information.PlatformLanguage", "PlatformLanguage")
                        .WithMany()
                        .HasForeignKey("PlatformLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PlatformLanguage");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserPhoneNumber", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserRating", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Ratings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserSettings", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserTag", b =>
                {
                    b.HasOne("diga.bl.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Platform.Information.PlatformTag", "PlatformTag")
                        .WithMany()
                        .HasForeignKey("PlatformTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PlatformTag");
                });

            modelBuilder.Entity("diga.bl.Models.Questions", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "AnswerText")
                        .WithMany()
                        .HasForeignKey("AnswerTextId");

                    b.HasOne("diga.bl.Models.Texts", "FullAnswerText")
                        .WithMany()
                        .HasForeignKey("FullAnswerTextId");

                    b.HasOne("diga.bl.Models.Texts", "QuestionText")
                        .WithMany()
                        .HasForeignKey("QuestionTextId");

                    b.Navigation("AnswerText");

                    b.Navigation("FullAnswerText");

                    b.Navigation("QuestionText");
                });

            modelBuilder.Entity("diga.bl.Models.Reviews", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "NameText")
                        .WithMany()
                        .HasForeignKey("NameTextId");

                    b.HasOne("diga.bl.Models.Texts", "PositionText")
                        .WithMany()
                        .HasForeignKey("PositionTextId");

                    b.HasOne("diga.bl.Models.Texts", "ReviewText")
                        .WithMany()
                        .HasForeignKey("ReviewTextId");

                    b.Navigation("NameText");

                    b.Navigation("PositionText");

                    b.Navigation("ReviewText");
                });

            modelBuilder.Entity("diga.bl.Models.Sectors", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "FullDescription")
                        .WithMany()
                        .HasForeignKey("FullDescriptionTextId");

                    b.Navigation("FullDescription");
                });

            modelBuilder.Entity("diga.bl.Models.TariffModules", b =>
                {
                    b.HasOne("diga.bl.Models.Modules", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Tariffs", "Tariff")
                        .WithMany("TariffModules")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("diga.bl.Models.TeamMembers", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "CountryText")
                        .WithMany()
                        .HasForeignKey("CountryTextId");

                    b.HasOne("diga.bl.Models.Texts", "DepartmentText")
                        .WithMany()
                        .HasForeignKey("DepartmentTextId");

                    b.HasOne("diga.bl.Models.Texts", "NameText")
                        .WithMany()
                        .HasForeignKey("NameTextId");

                    b.HasOne("diga.bl.Models.Texts", "PositionText")
                        .WithMany()
                        .HasForeignKey("PositionTextId");

                    b.Navigation("CountryText");

                    b.Navigation("DepartmentText");

                    b.Navigation("NameText");

                    b.Navigation("PositionText");
                });

            modelBuilder.Entity("diga.bl.Models.UserModules", b =>
                {
                    b.HasOne("diga.bl.Models.Modules", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diga.bl.Models.UserTariffs", b =>
                {
                    b.HasOne("diga.bl.Models.Tariffs", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tariff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("diga.bl.Models.ApplicationUser", b =>
                {
                    b.Navigation("Languages");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("PlatformCompany");

                    b.Navigation("Ratings");

                    b.Navigation("Reviews");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("diga.bl.Models.Modules", b =>
                {
                    b.Navigation("Functions");
                });

            modelBuilder.Entity("diga.bl.Models.Packets", b =>
                {
                    b.Navigation("PacketModules");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Chats.PlatformChatRoom", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Chats.PlatformChatRoomMessage", b =>
                {
                    b.Navigation("File");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContract", b =>
                {
                    b.Navigation("Approval");

                    b.Navigation("Bids");

                    b.Navigation("Categories");

                    b.Navigation("Discussions");

                    b.Navigation("Files");

                    b.Navigation("Parts");

                    b.Navigation("PlatformEstimates");

                    b.Navigation("Reviews");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Contracts.PlatformContractReview", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Marks");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Estimates.PlatformEstimate", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Estimates.PlatformEstimateSection", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Notifications.PlatformNotification", b =>
                {
                    b.Navigation("Datas");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Portfolio.PlatformPortfolioAlbum", b =>
                {
                    b.Navigation("AlbumCategories");

                    b.Navigation("PortfolioPhotos");
                });

            modelBuilder.Entity("diga.bl.Models.Platform.Users.PlatformUserSettings", b =>
                {
                    b.Navigation("FilterCategories");
                });

            modelBuilder.Entity("diga.bl.Models.Tariffs", b =>
                {
                    b.Navigation("TariffModules");
                });
#pragma warning restore 612, 618
        }
    }
}
