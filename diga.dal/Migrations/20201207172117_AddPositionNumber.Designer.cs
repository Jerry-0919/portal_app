// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using diga.dal;

namespace diga.dal.Migrations
{
    [DbContext(typeof(DigaContext))]
    [Migration("20201207172117_AddPositionNumber")]
    partial class AddPositionNumber
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("diga.bl.Models.Advantages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("LongTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TitleTextId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LongTextId");

                    b.HasIndex("ShortTextId");

                    b.HasIndex("TitleTextId");

                    b.ToTable("Advantages");
                });

            modelBuilder.Entity("diga.bl.Models.Articles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("TextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TitleTextId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TextId");

                    b.HasIndex("TitleTextId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("diga.bl.Models.Carts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("FromBalance")
                        .HasColumnType("float");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Modules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double?>("TotalPriceWithDiscount")
                        .HasColumnType("float");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TariffId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("diga.bl.Models.Cases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReviewFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewVideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TitleTextId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LongTextId");

                    b.HasIndex("ShortTextId");

                    b.HasIndex("TitleTextId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("diga.bl.Models.Functions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BigTitleTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FullDescriptionTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LongTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallTitleTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BigTitleTextId");

                    b.HasIndex("FullDescriptionTextId");

                    b.HasIndex("LongTextId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SmallTitleTextId");

                    b.ToTable("Functions");
                });

            modelBuilder.Entity("diga.bl.Models.ModuleSections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ButtonTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("TextId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ButtonTextId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("TextId");

                    b.ToTable("ModuleSections");
                });

            modelBuilder.Entity("diga.bl.Models.Modules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BigTitleTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CartOrder")
                        .HasColumnType("int");

                    b.Property<string>("CommentTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("SmallTitleTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BigTitleTextId");

                    b.HasIndex("CommentTextId");

                    b.HasIndex("LongTextId");

                    b.HasIndex("SmallTitleTextId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("diga.bl.Models.PacketModules", b =>
                {
                    b.Property<int>("PacketId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("PacketId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("PacketModules");
                });

            modelBuilder.Entity("diga.bl.Models.Packets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Days")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<double?>("PriceForNextUser")
                        .HasColumnType("float");

                    b.Property<string>("Tariff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TariffPrice")
                        .HasColumnType("float");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrialDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Packets");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("PlatformCities");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AddressHidden")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BuildStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractPriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PlannedBuildEnd")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TenderEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ContractPriorityId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PlatformContracts");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformContractPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlatformContractPriorities");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlatformContractTypes");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlatformCountries");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformEstimate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOrdered")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PlatformEstimates");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformEstimatePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimateSectionId")
                        .HasColumnType("int");

                    b.Property<string>("Measurement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EstimateSectionId");

                    b.ToTable("PlatformEstimatePositions");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformEstimateSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EstimateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentSectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstimateId");

                    b.HasIndex("ParentSectionId");

                    b.ToTable("PlatformEstimateSections");
                });

            modelBuilder.Entity("diga.bl.Models.Promocodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<double?>("ToBalance")
                        .HasColumnType("float");

                    b.Property<int?>("ToPeople")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Promocodes");
                });

            modelBuilder.Entity("diga.bl.Models.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AnswerTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullAnswerTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerTextId");

                    b.HasIndex("FullAnswerTextId");

                    b.HasIndex("QuestionTextId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("diga.bl.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("diga.bl.Models.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReviewTextId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NameTextId");

                    b.HasIndex("PositionTextId");

                    b.HasIndex("ReviewTextId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("diga.bl.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("diga.bl.Models.Sectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BigTitleTextId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FullDescriptionTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LongTextId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallTitleTextId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FullDescriptionTextId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("diga.bl.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("diga.bl.Models.TariffModules", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.HasKey("ModuleId", "TariffId");

                    b.HasIndex("TariffId");

                    b.ToTable("TariffModules");
                });

            modelBuilder.Entity("diga.bl.Models.Tariffs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double?>("PriceForNextUser")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("diga.bl.Models.TeamMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CountryTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionTextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryTextId");

                    b.HasIndex("DepartmentTextId");

                    b.HasIndex("NameTextId");

                    b.HasIndex("PositionTextId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("diga.bl.Models.Texts", b =>
                {
                    b.Property<string>("TextId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("En")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Es")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsHtml")
                        .HasColumnType("bit");

                    b.Property<string>("Pt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ru")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TextId");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("diga.bl.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AuthToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("diga.bl.Models.UserModules", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<double?>("CurrentPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsTrial")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("UserModules");
                });

            modelBuilder.Entity("diga.bl.Models.UserRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("diga.bl.Models.UserTariffs", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<double?>("CurrentPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsTrial")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<double?>("PriceForNextUser")
                        .HasColumnType("float");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "TariffId");

                    b.HasIndex("TariffId");

                    b.ToTable("UserTariffs");
                });

            modelBuilder.Entity("diga.bl.Models.Advantages", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "LongText")
                        .WithMany()
                        .HasForeignKey("LongTextId");

                    b.HasOne("diga.bl.Models.Texts", "ShortText")
                        .WithMany()
                        .HasForeignKey("ShortTextId");

                    b.HasOne("diga.bl.Models.Texts", "TitleText")
                        .WithMany()
                        .HasForeignKey("TitleTextId");

                    b.Navigation("LongText");

                    b.Navigation("ShortText");

                    b.Navigation("TitleText");
                });

            modelBuilder.Entity("diga.bl.Models.Articles", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "Text")
                        .WithMany()
                        .HasForeignKey("TextId");

                    b.HasOne("diga.bl.Models.Texts", "TitleText")
                        .WithMany()
                        .HasForeignKey("TitleTextId");

                    b.Navigation("Text");

                    b.Navigation("TitleText");
                });

            modelBuilder.Entity("diga.bl.Models.Carts", b =>
                {
                    b.HasOne("diga.bl.Models.Tariffs", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Tariff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diga.bl.Models.Cases", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "LongText")
                        .WithMany()
                        .HasForeignKey("LongTextId");

                    b.HasOne("diga.bl.Models.Texts", "ShortText")
                        .WithMany()
                        .HasForeignKey("ShortTextId");

                    b.HasOne("diga.bl.Models.Texts", "TitleText")
                        .WithMany()
                        .HasForeignKey("TitleTextId");

                    b.Navigation("LongText");

                    b.Navigation("ShortText");

                    b.Navigation("TitleText");
                });

            modelBuilder.Entity("diga.bl.Models.Functions", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "BigTitleText")
                        .WithMany()
                        .HasForeignKey("BigTitleTextId");

                    b.HasOne("diga.bl.Models.Texts", "FullDescription")
                        .WithMany()
                        .HasForeignKey("FullDescriptionTextId");

                    b.HasOne("diga.bl.Models.Texts", "LongText")
                        .WithMany()
                        .HasForeignKey("LongTextId");

                    b.HasOne("diga.bl.Models.Modules", "Module")
                        .WithMany("Functions")
                        .HasForeignKey("ModuleId");

                    b.HasOne("diga.bl.Models.Texts", "SmallTitleText")
                        .WithMany()
                        .HasForeignKey("SmallTitleTextId");

                    b.Navigation("BigTitleText");

                    b.Navigation("FullDescription");

                    b.Navigation("LongText");

                    b.Navigation("Module");

                    b.Navigation("SmallTitleText");
                });

            modelBuilder.Entity("diga.bl.Models.ModuleSections", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "ButtonText")
                        .WithMany()
                        .HasForeignKey("ButtonTextId");

                    b.HasOne("diga.bl.Models.Modules", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Texts", "Text")
                        .WithMany()
                        .HasForeignKey("TextId");

                    b.Navigation("ButtonText");

                    b.Navigation("Module");

                    b.Navigation("Text");
                });

            modelBuilder.Entity("diga.bl.Models.Modules", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "BigTitleText")
                        .WithMany()
                        .HasForeignKey("BigTitleTextId");

                    b.HasOne("diga.bl.Models.Texts", "CommentText")
                        .WithMany()
                        .HasForeignKey("CommentTextId");

                    b.HasOne("diga.bl.Models.Texts", "LongText")
                        .WithMany()
                        .HasForeignKey("LongTextId");

                    b.HasOne("diga.bl.Models.Texts", "SmallTitleText")
                        .WithMany()
                        .HasForeignKey("SmallTitleTextId");

                    b.Navigation("BigTitleText");

                    b.Navigation("CommentText");

                    b.Navigation("LongText");

                    b.Navigation("SmallTitleText");
                });

            modelBuilder.Entity("diga.bl.Models.PacketModules", b =>
                {
                    b.HasOne("diga.bl.Models.Modules", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Packets", "Packet")
                        .WithMany("PacketModules")
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformCity", b =>
                {
                    b.HasOne("diga.bl.Models.PlatformCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformContract", b =>
                {
                    b.HasOne("diga.bl.Models.PlatformCity", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("diga.bl.Models.PlatformContractPriority", "ContractPriority")
                        .WithMany()
                        .HasForeignKey("ContractPriorityId");

                    b.HasOne("diga.bl.Models.PlatformContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId");

                    b.HasOne("diga.bl.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("ContractPriority");

                    b.Navigation("ContractType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformEstimate", b =>
                {
                    b.HasOne("diga.bl.Models.PlatformContract", "PlatformContract")
                        .WithOne("PlatformEstimate")
                        .HasForeignKey("diga.bl.Models.PlatformEstimate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformContract");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformEstimatePosition", b =>
                {
                    b.HasOne("diga.bl.Models.PlatformEstimateSection", "EstimateSection")
                        .WithMany("Positions")
                        .HasForeignKey("EstimateSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstimateSection");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformEstimateSection", b =>
                {
                    b.HasOne("diga.bl.Models.PlatformEstimate", "Estimate")
                        .WithMany("Sections")
                        .HasForeignKey("EstimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.PlatformEstimateSection", "ParentSection")
                        .WithMany()
                        .HasForeignKey("ParentSectionId");

                    b.Navigation("Estimate");

                    b.Navigation("ParentSection");
                });

            modelBuilder.Entity("diga.bl.Models.Questions", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "AnswerText")
                        .WithMany()
                        .HasForeignKey("AnswerTextId");

                    b.HasOne("diga.bl.Models.Texts", "FullAnswerText")
                        .WithMany()
                        .HasForeignKey("FullAnswerTextId");

                    b.HasOne("diga.bl.Models.Texts", "QuestionText")
                        .WithMany()
                        .HasForeignKey("QuestionTextId");

                    b.Navigation("AnswerText");

                    b.Navigation("FullAnswerText");

                    b.Navigation("QuestionText");
                });

            modelBuilder.Entity("diga.bl.Models.Reviews", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "NameText")
                        .WithMany()
                        .HasForeignKey("NameTextId");

                    b.HasOne("diga.bl.Models.Texts", "PositionText")
                        .WithMany()
                        .HasForeignKey("PositionTextId");

                    b.HasOne("diga.bl.Models.Texts", "ReviewText")
                        .WithMany()
                        .HasForeignKey("ReviewTextId");

                    b.Navigation("NameText");

                    b.Navigation("PositionText");

                    b.Navigation("ReviewText");
                });

            modelBuilder.Entity("diga.bl.Models.Sectors", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "FullDescription")
                        .WithMany()
                        .HasForeignKey("FullDescriptionTextId");

                    b.Navigation("FullDescription");
                });

            modelBuilder.Entity("diga.bl.Models.TariffModules", b =>
                {
                    b.HasOne("diga.bl.Models.Modules", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.Tariffs", "Tariff")
                        .WithMany("TariffModules")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("diga.bl.Models.TeamMembers", b =>
                {
                    b.HasOne("diga.bl.Models.Texts", "CountryText")
                        .WithMany()
                        .HasForeignKey("CountryTextId");

                    b.HasOne("diga.bl.Models.Texts", "DepartmentText")
                        .WithMany()
                        .HasForeignKey("DepartmentTextId");

                    b.HasOne("diga.bl.Models.Texts", "NameText")
                        .WithMany()
                        .HasForeignKey("NameTextId");

                    b.HasOne("diga.bl.Models.Texts", "PositionText")
                        .WithMany()
                        .HasForeignKey("PositionTextId");

                    b.Navigation("CountryText");

                    b.Navigation("DepartmentText");

                    b.Navigation("NameText");

                    b.Navigation("PositionText");
                });

            modelBuilder.Entity("diga.bl.Models.UserModules", b =>
                {
                    b.HasOne("diga.bl.Models.Modules", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diga.bl.Models.UserRoles", b =>
                {
                    b.HasOne("diga.bl.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diga.bl.Models.UserTariffs", b =>
                {
                    b.HasOne("diga.bl.Models.Tariffs", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("diga.bl.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tariff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("diga.bl.Models.Modules", b =>
                {
                    b.Navigation("Functions");
                });

            modelBuilder.Entity("diga.bl.Models.Packets", b =>
                {
                    b.Navigation("PacketModules");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformContract", b =>
                {
                    b.Navigation("PlatformEstimate");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformEstimate", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("diga.bl.Models.PlatformEstimateSection", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("diga.bl.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("diga.bl.Models.Tariffs", b =>
                {
                    b.Navigation("TariffModules");
                });

            modelBuilder.Entity("diga.bl.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
